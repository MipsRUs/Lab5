
module reg2 ( ref_clk, RegWriteD, MemtoRegD, MemWriteD, ALUControlD, ALUSrcD, 
        RegDstD, LoadControlD, RD1, RD2, RsD, RtD, RdD, SignImmD, clr, 
        JALDataD, RegWriteE, MemtoRegE, MemWriteE, ALUControlE, ALUSrcE, 
        RegDstE, LoadControlE, RD1toMux1, RD2toMux2, RsE, RtE, RdE, SignImmE, 
        JALDataE );
  input [5:0] ALUControlD;
  input [2:0] LoadControlD;
  input [31:0] RD1;
  input [31:0] RD2;
  input [25:21] RsD;
  input [20:16] RtD;
  input [15:11] RdD;
  input [31:0] SignImmD;
  input [1:0] JALDataD;
  output [5:0] ALUControlE;
  output [2:0] LoadControlE;
  output [31:0] RD1toMux1;
  output [31:0] RD2toMux2;
  output [25:21] RsE;
  output [20:16] RtE;
  output [15:11] RdE;
  output [31:0] SignImmE;
  output [1:0] JALDataE;
  input ref_clk, RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, clr;
  output RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE;
  wire   N14, N15, N16, N17, N18, N19, N20, N21, N22, N23, N24, N25, N26, N27,
         N28, N29, N30, N31, N32, N33, N34, N35, N36, N37, N38, N39, N40, N41,
         N42, N43, N44, N45;
  assign N14 = RD1[0];
  assign N15 = RD1[1];
  assign N16 = RD1[2];
  assign N17 = RD1[3];
  assign N18 = RD1[4];
  assign N19 = RD1[5];
  assign N20 = RD1[6];
  assign N21 = RD1[7];
  assign N22 = RD1[8];
  assign N23 = RD1[9];
  assign N24 = RD1[10];
  assign N25 = RD1[11];
  assign N26 = RD1[12];
  assign N27 = RD1[13];
  assign N28 = RD1[14];
  assign N29 = RD1[15];
  assign N30 = RD1[16];
  assign N31 = RD1[17];
  assign N32 = RD1[18];
  assign N33 = RD1[19];
  assign N34 = RD1[20];
  assign N35 = RD1[21];
  assign N36 = RD1[22];
  assign N37 = RD1[23];
  assign N38 = RD1[24];
  assign N39 = RD1[25];
  assign N40 = RD1[26];
  assign N41 = RD1[27];
  assign N42 = RD1[28];
  assign N43 = RD1[29];
  assign N44 = RD1[30];
  assign N45 = RD1[31];

  DFFX1_LVT \RD1toMux1_reg[31]  ( .D(N45), .CLK(ref_clk), .Q(RD1toMux1[31]) );
  DFFX1_LVT \RD1toMux1_reg[30]  ( .D(N44), .CLK(ref_clk), .Q(RD1toMux1[30]) );
  DFFX1_LVT \RD1toMux1_reg[29]  ( .D(N43), .CLK(ref_clk), .Q(RD1toMux1[29]) );
  DFFX1_LVT \RD1toMux1_reg[28]  ( .D(N42), .CLK(ref_clk), .Q(RD1toMux1[28]) );
  DFFX1_LVT \RD1toMux1_reg[27]  ( .D(N41), .CLK(ref_clk), .Q(RD1toMux1[27]) );
  DFFX1_LVT \RD1toMux1_reg[26]  ( .D(N40), .CLK(ref_clk), .Q(RD1toMux1[26]) );
  DFFX1_LVT \RD1toMux1_reg[25]  ( .D(N39), .CLK(ref_clk), .Q(RD1toMux1[25]) );
  DFFX1_LVT \RD1toMux1_reg[24]  ( .D(N38), .CLK(ref_clk), .Q(RD1toMux1[24]) );
  DFFX1_LVT \RD1toMux1_reg[23]  ( .D(N37), .CLK(ref_clk), .Q(RD1toMux1[23]) );
  DFFX1_LVT \RD1toMux1_reg[22]  ( .D(N36), .CLK(ref_clk), .Q(RD1toMux1[22]) );
  DFFX1_LVT \RD1toMux1_reg[21]  ( .D(N35), .CLK(ref_clk), .Q(RD1toMux1[21]) );
  DFFX1_LVT \RD1toMux1_reg[20]  ( .D(N34), .CLK(ref_clk), .Q(RD1toMux1[20]) );
  DFFX1_LVT \RD1toMux1_reg[19]  ( .D(N33), .CLK(ref_clk), .Q(RD1toMux1[19]) );
  DFFX1_LVT \RD1toMux1_reg[18]  ( .D(N32), .CLK(ref_clk), .Q(RD1toMux1[18]) );
  DFFX1_LVT \RD1toMux1_reg[17]  ( .D(N31), .CLK(ref_clk), .Q(RD1toMux1[17]) );
  DFFX1_LVT \RD1toMux1_reg[16]  ( .D(N30), .CLK(ref_clk), .Q(RD1toMux1[16]) );
  DFFX1_LVT \RD1toMux1_reg[15]  ( .D(N29), .CLK(ref_clk), .Q(RD1toMux1[15]) );
  DFFX1_LVT \RD1toMux1_reg[14]  ( .D(N28), .CLK(ref_clk), .Q(RD1toMux1[14]) );
  DFFX1_LVT \RD1toMux1_reg[13]  ( .D(N27), .CLK(ref_clk), .Q(RD1toMux1[13]) );
  DFFX1_LVT \RD1toMux1_reg[12]  ( .D(N26), .CLK(ref_clk), .Q(RD1toMux1[12]) );
  DFFX1_LVT \RD1toMux1_reg[11]  ( .D(N25), .CLK(ref_clk), .Q(RD1toMux1[11]) );
  DFFX1_LVT \RD1toMux1_reg[10]  ( .D(N24), .CLK(ref_clk), .Q(RD1toMux1[10]) );
  DFFX1_LVT \RD1toMux1_reg[9]  ( .D(N23), .CLK(ref_clk), .Q(RD1toMux1[9]) );
  DFFX1_LVT \RD1toMux1_reg[8]  ( .D(N22), .CLK(ref_clk), .Q(RD1toMux1[8]) );
  DFFX1_LVT \RD1toMux1_reg[7]  ( .D(N21), .CLK(ref_clk), .Q(RD1toMux1[7]) );
  DFFX1_LVT \RD1toMux1_reg[6]  ( .D(N20), .CLK(ref_clk), .Q(RD1toMux1[6]) );
  DFFX1_LVT \RD1toMux1_reg[5]  ( .D(N19), .CLK(ref_clk), .Q(RD1toMux1[5]) );
  DFFX1_LVT \RD1toMux1_reg[4]  ( .D(N18), .CLK(ref_clk), .Q(RD1toMux1[4]) );
  DFFX1_LVT \RD1toMux1_reg[3]  ( .D(N17), .CLK(ref_clk), .Q(RD1toMux1[3]) );
  DFFX1_LVT \RD1toMux1_reg[2]  ( .D(N16), .CLK(ref_clk), .Q(RD1toMux1[2]) );
  DFFX1_LVT \RD1toMux1_reg[1]  ( .D(N15), .CLK(ref_clk), .Q(RD1toMux1[1]) );
  DFFX1_LVT \RD1toMux1_reg[0]  ( .D(N14), .CLK(ref_clk), .Q(RD1toMux1[0]) );
endmodule


module mux4_0 ( in0, in1, in2, in3, sel, mux4out );
  input [31:0] in0;
  input [31:0] in1;
  input [31:0] in2;
  input [31:0] in3;
  input [1:0] sel;
  output [31:0] mux4out;

  assign mux4out[31] = in0[31];
  assign mux4out[30] = in0[30];
  assign mux4out[29] = in0[29];
  assign mux4out[28] = in0[28];
  assign mux4out[27] = in0[27];
  assign mux4out[26] = in0[26];
  assign mux4out[25] = in0[25];
  assign mux4out[24] = in0[24];
  assign mux4out[23] = in0[23];
  assign mux4out[22] = in0[22];
  assign mux4out[21] = in0[21];
  assign mux4out[20] = in0[20];
  assign mux4out[19] = in0[19];
  assign mux4out[18] = in0[18];
  assign mux4out[17] = in0[17];
  assign mux4out[16] = in0[16];
  assign mux4out[15] = in0[15];
  assign mux4out[14] = in0[14];
  assign mux4out[13] = in0[13];
  assign mux4out[12] = in0[12];
  assign mux4out[11] = in0[11];
  assign mux4out[10] = in0[10];
  assign mux4out[9] = in0[9];
  assign mux4out[8] = in0[8];
  assign mux4out[7] = in0[7];
  assign mux4out[6] = in0[6];
  assign mux4out[5] = in0[5];
  assign mux4out[4] = in0[4];
  assign mux4out[3] = in0[3];
  assign mux4out[2] = in0[2];
  assign mux4out[1] = in0[1];
  assign mux4out[0] = in0[0];

endmodule


module alu ( Func_in, A_in, B_in, O_out );
  input [5:0] Func_in;
  input [31:0] A_in;
  input [31:0] B_in;
  output [31:0] O_out;
  wire   \C4M/DATA9_0 , \C4M/DATA9_22 , \C4M/DATA9_23 , \C4M/DATA9_28 ,
         \C4M/DATA9_29 , n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
         n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26,
         n27, n28, n29, n30, n31, n32;
  assign O_out[0] = \C4M/DATA9_0 ;
  assign O_out[22] = \C4M/DATA9_22 ;
  assign O_out[23] = \C4M/DATA9_23 ;
  assign O_out[28] = \C4M/DATA9_28 ;
  assign O_out[29] = \C4M/DATA9_29 ;

  INVX0_LVT U2 ( .A(A_in[2]), .Y(n2) );
  INVX0_LVT U3 ( .A(n28), .Y(n1) );
  INVX0_LVT U4 ( .A(A_in[0]), .Y(\C4M/DATA9_0 ) );
  AND2X1_LVT U5 ( .A1(A_in[0]), .A2(A_in[1]), .Y(n28) );
  NAND2X0_LVT U6 ( .A1(n2), .A2(n1), .Y(n27) );
  AND2X1_LVT U7 ( .A1(n27), .A2(A_in[3]), .Y(n26) );
  AND2X1_LVT U8 ( .A1(n26), .A2(A_in[4]), .Y(n25) );
  AND2X1_LVT U9 ( .A1(n25), .A2(A_in[5]), .Y(n24) );
  AND2X1_LVT U10 ( .A1(n24), .A2(A_in[6]), .Y(n23) );
  AND2X1_LVT U11 ( .A1(n23), .A2(A_in[7]), .Y(n22) );
  AND2X1_LVT U12 ( .A1(n22), .A2(A_in[8]), .Y(n21) );
  AND2X1_LVT U13 ( .A1(n21), .A2(A_in[9]), .Y(n20) );
  AND2X1_LVT U14 ( .A1(n20), .A2(A_in[10]), .Y(n19) );
  AND2X1_LVT U15 ( .A1(n19), .A2(A_in[11]), .Y(n18) );
  AND2X1_LVT U16 ( .A1(n18), .A2(A_in[12]), .Y(n17) );
  AND2X1_LVT U17 ( .A1(n17), .A2(A_in[13]), .Y(n16) );
  AND2X1_LVT U18 ( .A1(n16), .A2(A_in[14]), .Y(n15) );
  AND2X1_LVT U19 ( .A1(n15), .A2(A_in[15]), .Y(n14) );
  AND2X1_LVT U20 ( .A1(n14), .A2(A_in[16]), .Y(n13) );
  AND2X1_LVT U21 ( .A1(n13), .A2(A_in[17]), .Y(n12) );
  AND2X1_LVT U22 ( .A1(n12), .A2(A_in[18]), .Y(n11) );
  AND2X1_LVT U23 ( .A1(n11), .A2(A_in[19]), .Y(n10) );
  AND2X1_LVT U24 ( .A1(n10), .A2(A_in[20]), .Y(n9) );
  AND2X1_LVT U25 ( .A1(n9), .A2(A_in[21]), .Y(n8) );
  AND2X1_LVT U26 ( .A1(n8), .A2(A_in[22]), .Y(n7) );
  AND2X1_LVT U27 ( .A1(n7), .A2(A_in[23]), .Y(n6) );
  AND2X1_LVT U28 ( .A1(n6), .A2(A_in[24]), .Y(n5) );
  AND2X1_LVT U29 ( .A1(n5), .A2(A_in[25]), .Y(n4) );
  AND2X1_LVT U30 ( .A1(n4), .A2(A_in[26]), .Y(n3) );
  AND2X1_LVT U31 ( .A1(n3), .A2(A_in[27]), .Y(n29) );
  XOR2X1_LVT U32 ( .A1(A_in[28]), .A2(n29), .Y(\C4M/DATA9_28 ) );
  XOR2X1_LVT U33 ( .A1(A_in[27]), .A2(n3), .Y(O_out[27]) );
  XOR2X1_LVT U34 ( .A1(A_in[26]), .A2(n4), .Y(O_out[26]) );
  XOR2X1_LVT U35 ( .A1(A_in[25]), .A2(n5), .Y(O_out[25]) );
  XOR2X1_LVT U36 ( .A1(A_in[24]), .A2(n6), .Y(O_out[24]) );
  XOR2X1_LVT U37 ( .A1(A_in[23]), .A2(n7), .Y(\C4M/DATA9_23 ) );
  XOR2X1_LVT U38 ( .A1(A_in[22]), .A2(n8), .Y(\C4M/DATA9_22 ) );
  XOR2X1_LVT U39 ( .A1(A_in[21]), .A2(n9), .Y(O_out[21]) );
  XOR2X1_LVT U40 ( .A1(A_in[20]), .A2(n10), .Y(O_out[20]) );
  XOR2X1_LVT U41 ( .A1(A_in[19]), .A2(n11), .Y(O_out[19]) );
  XOR2X1_LVT U42 ( .A1(A_in[18]), .A2(n12), .Y(O_out[18]) );
  XOR2X1_LVT U43 ( .A1(A_in[17]), .A2(n13), .Y(O_out[17]) );
  XOR2X1_LVT U44 ( .A1(A_in[16]), .A2(n14), .Y(O_out[16]) );
  XOR2X1_LVT U45 ( .A1(A_in[15]), .A2(n15), .Y(O_out[15]) );
  XOR2X1_LVT U46 ( .A1(A_in[14]), .A2(n16), .Y(O_out[14]) );
  XOR2X1_LVT U47 ( .A1(A_in[13]), .A2(n17), .Y(O_out[13]) );
  XOR2X1_LVT U48 ( .A1(A_in[12]), .A2(n18), .Y(O_out[12]) );
  XOR2X1_LVT U49 ( .A1(A_in[11]), .A2(n19), .Y(O_out[11]) );
  XOR2X1_LVT U50 ( .A1(A_in[10]), .A2(n20), .Y(O_out[10]) );
  XOR2X1_LVT U51 ( .A1(A_in[9]), .A2(n21), .Y(O_out[9]) );
  XOR2X1_LVT U52 ( .A1(A_in[8]), .A2(n22), .Y(O_out[8]) );
  XOR2X1_LVT U53 ( .A1(A_in[7]), .A2(n23), .Y(O_out[7]) );
  XOR2X1_LVT U54 ( .A1(A_in[6]), .A2(n24), .Y(O_out[6]) );
  XOR2X1_LVT U55 ( .A1(A_in[5]), .A2(n25), .Y(O_out[5]) );
  XOR2X1_LVT U56 ( .A1(A_in[4]), .A2(n26), .Y(O_out[4]) );
  XOR2X1_LVT U57 ( .A1(A_in[3]), .A2(n27), .Y(O_out[3]) );
  XNOR2X1_LVT U58 ( .A1(A_in[2]), .A2(n28), .Y(O_out[2]) );
  XOR2X1_LVT U59 ( .A1(A_in[1]), .A2(A_in[0]), .Y(O_out[1]) );
  AND2X1_LVT U60 ( .A1(n29), .A2(A_in[28]), .Y(n30) );
  AND2X1_LVT U61 ( .A1(n30), .A2(A_in[29]), .Y(n31) );
  XOR2X1_LVT U62 ( .A1(A_in[30]), .A2(n31), .Y(O_out[30]) );
  XOR2X1_LVT U63 ( .A1(A_in[29]), .A2(n30), .Y(\C4M/DATA9_29 ) );
  AND2X1_LVT U64 ( .A1(n31), .A2(A_in[30]), .Y(n32) );
  XOR2X1_LVT U65 ( .A1(n32), .A2(A_in[31]), .Y(O_out[31]) );
endmodule


module reg3 ( ref_clk, RegWriteE, MemtoRegE, MemWriteE, LoadControlE, alu_in, 
        WriteDataE, WriteRegE, SignImmE, JALDataE, RegWriteM, MemtoRegM, 
        MemWriteM, LoadControlM, alu_out, WriteDataM, WriteRegM, SignImmM, 
        JALDataM );
  input [2:0] LoadControlE;
  input [31:0] alu_in;
  input [31:0] WriteDataE;
  input [4:0] WriteRegE;
  input [31:0] SignImmE;
  input [1:0] JALDataE;
  output [2:0] LoadControlM;
  output [31:0] alu_out;
  output [31:0] WriteDataM;
  output [4:0] WriteRegM;
  output [31:0] SignImmM;
  output [1:0] JALDataM;
  input ref_clk, RegWriteE, MemtoRegE, MemWriteE;
  output RegWriteM, MemtoRegM, MemWriteM;


  DFFX1_LVT \temp_alu_in_reg[31]  ( .D(alu_in[31]), .CLK(ref_clk), .Q(
        alu_out[31]) );
  DFFX1_LVT \temp_alu_in_reg[30]  ( .D(alu_in[30]), .CLK(ref_clk), .Q(
        alu_out[30]) );
  DFFX1_LVT \temp_alu_in_reg[29]  ( .D(alu_in[29]), .CLK(ref_clk), .Q(
        alu_out[29]) );
  DFFX1_LVT \temp_alu_in_reg[28]  ( .D(alu_in[28]), .CLK(ref_clk), .Q(
        alu_out[28]) );
  DFFX1_LVT \temp_alu_in_reg[27]  ( .D(alu_in[27]), .CLK(ref_clk), .Q(
        alu_out[27]) );
  DFFX1_LVT \temp_alu_in_reg[26]  ( .D(alu_in[26]), .CLK(ref_clk), .Q(
        alu_out[26]) );
  DFFX1_LVT \temp_alu_in_reg[25]  ( .D(alu_in[25]), .CLK(ref_clk), .Q(
        alu_out[25]) );
  DFFX1_LVT \temp_alu_in_reg[24]  ( .D(alu_in[24]), .CLK(ref_clk), .Q(
        alu_out[24]) );
  DFFX1_LVT \temp_alu_in_reg[23]  ( .D(alu_in[23]), .CLK(ref_clk), .Q(
        alu_out[23]) );
  DFFX1_LVT \temp_alu_in_reg[22]  ( .D(alu_in[22]), .CLK(ref_clk), .Q(
        alu_out[22]) );
  DFFX1_LVT \temp_alu_in_reg[21]  ( .D(alu_in[21]), .CLK(ref_clk), .Q(
        alu_out[21]) );
  DFFX1_LVT \temp_alu_in_reg[20]  ( .D(alu_in[20]), .CLK(ref_clk), .Q(
        alu_out[20]) );
  DFFX1_LVT \temp_alu_in_reg[19]  ( .D(alu_in[19]), .CLK(ref_clk), .Q(
        alu_out[19]) );
  DFFX1_LVT \temp_alu_in_reg[18]  ( .D(alu_in[18]), .CLK(ref_clk), .Q(
        alu_out[18]) );
  DFFX1_LVT \temp_alu_in_reg[17]  ( .D(alu_in[17]), .CLK(ref_clk), .Q(
        alu_out[17]) );
  DFFX1_LVT \temp_alu_in_reg[16]  ( .D(alu_in[16]), .CLK(ref_clk), .Q(
        alu_out[16]) );
  DFFX1_LVT \temp_alu_in_reg[15]  ( .D(alu_in[15]), .CLK(ref_clk), .Q(
        alu_out[15]) );
  DFFX1_LVT \temp_alu_in_reg[14]  ( .D(alu_in[14]), .CLK(ref_clk), .Q(
        alu_out[14]) );
  DFFX1_LVT \temp_alu_in_reg[13]  ( .D(alu_in[13]), .CLK(ref_clk), .Q(
        alu_out[13]) );
  DFFX1_LVT \temp_alu_in_reg[12]  ( .D(alu_in[12]), .CLK(ref_clk), .Q(
        alu_out[12]) );
  DFFX1_LVT \temp_alu_in_reg[11]  ( .D(alu_in[11]), .CLK(ref_clk), .Q(
        alu_out[11]) );
  DFFX1_LVT \temp_alu_in_reg[10]  ( .D(alu_in[10]), .CLK(ref_clk), .Q(
        alu_out[10]) );
  DFFX1_LVT \temp_alu_in_reg[9]  ( .D(alu_in[9]), .CLK(ref_clk), .Q(alu_out[9]) );
  DFFX1_LVT \temp_alu_in_reg[8]  ( .D(alu_in[8]), .CLK(ref_clk), .Q(alu_out[8]) );
  DFFX1_LVT \temp_alu_in_reg[7]  ( .D(alu_in[7]), .CLK(ref_clk), .Q(alu_out[7]) );
  DFFX1_LVT \temp_alu_in_reg[6]  ( .D(alu_in[6]), .CLK(ref_clk), .Q(alu_out[6]) );
  DFFX1_LVT \temp_alu_in_reg[5]  ( .D(alu_in[5]), .CLK(ref_clk), .Q(alu_out[5]) );
  DFFX1_LVT \temp_alu_in_reg[4]  ( .D(alu_in[4]), .CLK(ref_clk), .Q(alu_out[4]) );
  DFFX1_LVT \temp_alu_in_reg[3]  ( .D(alu_in[3]), .CLK(ref_clk), .Q(alu_out[3]) );
  DFFX1_LVT \temp_alu_in_reg[2]  ( .D(alu_in[2]), .CLK(ref_clk), .Q(alu_out[2]) );
  DFFX1_LVT \temp_alu_in_reg[1]  ( .D(alu_in[1]), .CLK(ref_clk), .Q(alu_out[1]) );
  DFFX1_LVT \temp_alu_in_reg[0]  ( .D(alu_in[0]), .CLK(ref_clk), .Q(alu_out[0]) );
endmodule


module reg4 ( ref_clk, RegWriteM, MemtoRegM, LoadControlM, rd_in, alu_in, 
        WriteRegM, SignImmM, JALDataM, RegWriteW, MemtoRegW, LoadControlW, 
        rd_out, alu_out, WriteRegW, SignImmW, JALDataW );
  input [2:0] LoadControlM;
  input [31:0] rd_in;
  input [31:0] alu_in;
  input [4:0] WriteRegM;
  input [31:0] SignImmM;
  input [1:0] JALDataM;
  output [2:0] LoadControlW;
  output [31:0] rd_out;
  output [31:0] alu_out;
  output [4:0] WriteRegW;
  output [31:0] SignImmW;
  output [1:0] JALDataW;
  input ref_clk, RegWriteM, MemtoRegM;
  output RegWriteW, MemtoRegW;


  DFFX1_LVT \temp_alu_in_reg[31]  ( .D(alu_in[31]), .CLK(ref_clk), .Q(
        alu_out[31]) );
  DFFX1_LVT \temp_alu_in_reg[30]  ( .D(alu_in[30]), .CLK(ref_clk), .Q(
        alu_out[30]) );
  DFFX1_LVT \temp_alu_in_reg[29]  ( .D(alu_in[29]), .CLK(ref_clk), .Q(
        alu_out[29]) );
  DFFX1_LVT \temp_alu_in_reg[28]  ( .D(alu_in[28]), .CLK(ref_clk), .Q(
        alu_out[28]) );
  DFFX1_LVT \temp_alu_in_reg[27]  ( .D(alu_in[27]), .CLK(ref_clk), .Q(
        alu_out[27]) );
  DFFX1_LVT \temp_alu_in_reg[26]  ( .D(alu_in[26]), .CLK(ref_clk), .Q(
        alu_out[26]) );
  DFFX1_LVT \temp_alu_in_reg[25]  ( .D(alu_in[25]), .CLK(ref_clk), .Q(
        alu_out[25]) );
  DFFX1_LVT \temp_alu_in_reg[24]  ( .D(alu_in[24]), .CLK(ref_clk), .Q(
        alu_out[24]) );
  DFFX1_LVT \temp_alu_in_reg[23]  ( .D(alu_in[23]), .CLK(ref_clk), .Q(
        alu_out[23]) );
  DFFX1_LVT \temp_alu_in_reg[22]  ( .D(alu_in[22]), .CLK(ref_clk), .Q(
        alu_out[22]) );
  DFFX1_LVT \temp_alu_in_reg[21]  ( .D(alu_in[21]), .CLK(ref_clk), .Q(
        alu_out[21]) );
  DFFX1_LVT \temp_alu_in_reg[20]  ( .D(alu_in[20]), .CLK(ref_clk), .Q(
        alu_out[20]) );
  DFFX1_LVT \temp_alu_in_reg[19]  ( .D(alu_in[19]), .CLK(ref_clk), .Q(
        alu_out[19]) );
  DFFX1_LVT \temp_alu_in_reg[18]  ( .D(alu_in[18]), .CLK(ref_clk), .Q(
        alu_out[18]) );
  DFFX1_LVT \temp_alu_in_reg[17]  ( .D(alu_in[17]), .CLK(ref_clk), .Q(
        alu_out[17]) );
  DFFX1_LVT \temp_alu_in_reg[16]  ( .D(alu_in[16]), .CLK(ref_clk), .Q(
        alu_out[16]) );
  DFFX1_LVT \temp_alu_in_reg[15]  ( .D(alu_in[15]), .CLK(ref_clk), .Q(
        alu_out[15]) );
  DFFX1_LVT \temp_alu_in_reg[14]  ( .D(alu_in[14]), .CLK(ref_clk), .Q(
        alu_out[14]) );
  DFFX1_LVT \temp_alu_in_reg[13]  ( .D(alu_in[13]), .CLK(ref_clk), .Q(
        alu_out[13]) );
  DFFX1_LVT \temp_alu_in_reg[12]  ( .D(alu_in[12]), .CLK(ref_clk), .Q(
        alu_out[12]) );
  DFFX1_LVT \temp_alu_in_reg[11]  ( .D(alu_in[11]), .CLK(ref_clk), .Q(
        alu_out[11]) );
  DFFX1_LVT \temp_alu_in_reg[10]  ( .D(alu_in[10]), .CLK(ref_clk), .Q(
        alu_out[10]) );
  DFFX1_LVT \temp_alu_in_reg[9]  ( .D(alu_in[9]), .CLK(ref_clk), .Q(alu_out[9]) );
  DFFX1_LVT \temp_alu_in_reg[8]  ( .D(alu_in[8]), .CLK(ref_clk), .Q(alu_out[8]) );
  DFFX1_LVT \temp_alu_in_reg[7]  ( .D(alu_in[7]), .CLK(ref_clk), .Q(alu_out[7]) );
  DFFX1_LVT \temp_alu_in_reg[6]  ( .D(alu_in[6]), .CLK(ref_clk), .Q(alu_out[6]) );
  DFFX1_LVT \temp_alu_in_reg[5]  ( .D(alu_in[5]), .CLK(ref_clk), .Q(alu_out[5]) );
  DFFX1_LVT \temp_alu_in_reg[4]  ( .D(alu_in[4]), .CLK(ref_clk), .Q(alu_out[4]) );
  DFFX1_LVT \temp_alu_in_reg[3]  ( .D(alu_in[3]), .CLK(ref_clk), .Q(alu_out[3]) );
  DFFX1_LVT \temp_alu_in_reg[2]  ( .D(alu_in[2]), .CLK(ref_clk), .Q(alu_out[2]) );
  DFFX1_LVT \temp_alu_in_reg[1]  ( .D(alu_in[1]), .CLK(ref_clk), .Q(alu_out[1]) );
  DFFX1_LVT \temp_alu_in_reg[0]  ( .D(alu_in[0]), .CLK(ref_clk), .Q(alu_out[0]) );
endmodule


module shiftextend ( loadcontrol, in32, out32 );
  input [2:0] loadcontrol;
  input [31:0] in32;
  output [31:0] out32;
  wire   \in32[6] , \in32[5] , \in32[4] , \in32[3] , \in32[2] , \in32[1] ,
         \in32[0] ;
  assign out32[31] = in32[31];
  assign out32[30] = in32[30];
  assign out32[29] = in32[29];
  assign out32[28] = in32[28];
  assign out32[27] = in32[27];
  assign out32[26] = in32[26];
  assign out32[25] = in32[25];
  assign out32[24] = in32[24];
  assign out32[23] = in32[23];
  assign out32[22] = in32[22];
  assign out32[21] = in32[21];
  assign out32[20] = in32[20];
  assign out32[19] = in32[19];
  assign out32[18] = in32[18];
  assign out32[17] = in32[17];
  assign out32[16] = in32[16];
  assign out32[15] = in32[15];
  assign out32[14] = in32[14];
  assign out32[13] = in32[13];
  assign out32[12] = in32[12];
  assign out32[11] = in32[11];
  assign out32[10] = in32[10];
  assign out32[9] = in32[9];
  assign out32[8] = in32[8];
  assign out32[7] = in32[7];
  assign out32[6] = \in32[6] ;
  assign \in32[6]  = in32[6];
  assign out32[5] = \in32[5] ;
  assign \in32[5]  = in32[5];
  assign out32[4] = \in32[4] ;
  assign \in32[4]  = in32[4];
  assign out32[3] = \in32[3] ;
  assign \in32[3]  = in32[3];
  assign out32[2] = \in32[2] ;
  assign \in32[2]  = in32[2];
  assign out32[1] = \in32[1] ;
  assign \in32[1]  = in32[1];
  assign out32[0] = \in32[0] ;
  assign \in32[0]  = in32[0];

endmodule


module mux4_1 ( in0, in1, in2, in3, sel, mux4out );
  input [31:0] in0;
  input [31:0] in1;
  input [31:0] in2;
  input [31:0] in3;
  input [1:0] sel;
  output [31:0] mux4out;

  assign mux4out[31] = in0[31];
  assign mux4out[30] = in0[30];
  assign mux4out[29] = in0[29];
  assign mux4out[28] = in0[28];
  assign mux4out[27] = in0[27];
  assign mux4out[26] = in0[26];
  assign mux4out[25] = in0[25];
  assign mux4out[24] = in0[24];
  assign mux4out[23] = in0[23];
  assign mux4out[22] = in0[22];
  assign mux4out[21] = in0[21];
  assign mux4out[20] = in0[20];
  assign mux4out[19] = in0[19];
  assign mux4out[18] = in0[18];
  assign mux4out[17] = in0[17];
  assign mux4out[16] = in0[16];
  assign mux4out[15] = in0[15];
  assign mux4out[14] = in0[14];
  assign mux4out[13] = in0[13];
  assign mux4out[12] = in0[12];
  assign mux4out[11] = in0[11];
  assign mux4out[10] = in0[10];
  assign mux4out[9] = in0[9];
  assign mux4out[8] = in0[8];
  assign mux4out[7] = in0[7];
  assign mux4out[6] = in0[6];
  assign mux4out[5] = in0[5];
  assign mux4out[4] = in0[4];
  assign mux4out[3] = in0[3];
  assign mux4out[2] = in0[2];
  assign mux4out[1] = in0[1];
  assign mux4out[0] = in0[0];

endmodule


module mux_1 ( in0, in1, sel, outb );
  input [31:0] in0;
  input [31:0] in1;
  output [31:0] outb;
  input sel;

  assign outb[31] = in0[31];
  assign outb[30] = in0[30];
  assign outb[29] = in0[29];
  assign outb[28] = in0[28];
  assign outb[27] = in0[27];
  assign outb[26] = in0[26];
  assign outb[25] = in0[25];
  assign outb[24] = in0[24];
  assign outb[23] = in0[23];
  assign outb[22] = in0[22];
  assign outb[21] = in0[21];
  assign outb[20] = in0[20];
  assign outb[19] = in0[19];
  assign outb[18] = in0[18];
  assign outb[17] = in0[17];
  assign outb[16] = in0[16];
  assign outb[15] = in0[15];
  assign outb[14] = in0[14];
  assign outb[13] = in0[13];
  assign outb[12] = in0[12];
  assign outb[11] = in0[11];
  assign outb[10] = in0[10];
  assign outb[9] = in0[9];
  assign outb[8] = in0[8];
  assign outb[7] = in0[7];
  assign outb[6] = in0[6];
  assign outb[5] = in0[5];
  assign outb[4] = in0[4];
  assign outb[3] = in0[3];
  assign outb[2] = in0[2];
  assign outb[1] = in0[1];
  assign outb[0] = in0[0];

endmodule


module processor ( ref_clk, reset, out_b );
  output [31:0] out_b;
  input ref_clk, reset;
  wire   net33222, net33223, net33224, net33225, net33226, net33227, net33228,
         net33229, net33230, net33231, net33232, net33233, net33234, net33235,
         net33236, net33237, net33238, net33239, net33240, net33241, net33242,
         net33243, net33244, net33245, net33246, net33247, net33248, net33249,
         net33250, net33251, net33252, net33253, net33254, net33255, net33256,
         net33257, net33258, net33259, net33260, net33261, net33262, net33263,
         net33264, net33265, net33266, net33267, net33268, net33269, net33270,
         net33271, net33272, net33273, net33274, net33275, net33276, net33277,
         net33278, net33279, net33280, net33281, net33282, net33283, net33284,
         net33285, net33286, net33287, net33288, net33289, net33290, net33291,
         net33292, net33293, net33294, net33295, net33296, net33297, net33298,
         net33299, net33300, net33301, net33302, net33303, net33304, net33305,
         net33306, net33307, net33308, net33309, net33310, net33311, net33312,
         net33313, net33314, net33315, net33316, net33317, net33318, net33319,
         net33320, net33321, net33322, net33323, net33324, net33325, net33326,
         net33327, net33328, net33329, net33330, net33331, net33332, net33333,
         net33334, net33335, net33336, net33337, net33338, net33339, net33340,
         net33341, net33342, net33343, net33344, net33345, net33346, net33347,
         net33348, net33349, net33350, net33351, net33352, net33353, net33354,
         net33355, net33356, net33357, net33358, net33359, net33360, net33361,
         net33362, net33363, net33364, net33365, net33366, net33367, net33368,
         net33369, net33370, net33371, net33372, net33373, net33374, net33375,
         net33376, net33377, net33378, net33379, net33380, net33381, net33382,
         net33383, net33384, net33385, net33386, net33387, net33388, net33389,
         net33390, net33391, net33392, net33393, net33394, net33395, net33396,
         net33397, net33398, net33399, net33400, net33401, net33402, net33403,
         net33404, net33405, net33406, net33407, net33408, net33409, net33410,
         net33411, net33412, net33413, net33414, net33415, net33416, net33417,
         net33418, net33419, net33420, net33421, net33422, net33423, net33424,
         net33425, net33426, net33427, net33428, net33429, net33430, net33431,
         net33432, net33433, net33434, net33435, net33436, net33437, net33438,
         net33439, net33440, net33441, net33442, net33443, net33444, net33445,
         net33446, net33447, net33448, net33449, net33450, net33451, net33452,
         net33453, net33454, net33455, net33456, net33457, net33458, net33459,
         net33460, net33461, net33462, net33463, net33464, net33465, net33466,
         net33467, net33468, net33469, net33470, net33471, net33472, net33473,
         net33474, net33475, net33476, net33477, net33478, net33479, net33480,
         net33481, net33482, net33483, net33484, net33485, net33486, net33487,
         net33488, net33489, net33490, net33491, net33492, net33493, net33494,
         net33495, net33496, net33497, net33498, net33499, net33500, net33501,
         net33502, net33503, net33504, net33505, net33506, net33507, net33508,
         net33509, net33510, net33511, net33512, net33513, net33514, net33515,
         net33516, net33517, net33518, net33519, net33520, net33521, net33522,
         net33523, net33524, net33525, net33526, net33527, net33528, net33529,
         net33530, net33531, net33532, net33533, net33534, net33535, net33536,
         net33537, net33538;
  wire   [31:0] RD1_out;
  wire   [31:0] JALDataW_out;
  wire   [31:0] ALUOutM;
  wire   [31:0] RD1toMux1;
  wire   [31:0] ResultW;
  wire   [31:0] SrcAE;
  wire   [31:0] ALUOutW;
  wire   [31:0] MemtoRegWmuxx_out;

  regfile regfilex ( .ref_clk(ref_clk), .we(1'b1), .raddr_1({1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0}), .raddr_2({1'b0, 1'b0, 1'b0, 1'b1, 1'b0}), .waddr({1'b0, 
        1'b0, 1'b0, 1'b1, 1'b0}), .rdata_1(RD1_out), .wdata(JALDataW_out) );
  reg2 reg2x ( .ref_clk(ref_clk), .RegWriteD(net33453), .MemtoRegD(net33454), 
        .MemWriteD(net33455), .ALUControlD({net33456, net33457, net33458, 
        net33459, net33460, net33461}), .ALUSrcD(net33462), .RegDstD(net33463), 
        .LoadControlD({net33464, net33465, net33466}), .RD1(RD1_out), .RD2({
        net33467, net33468, net33469, net33470, net33471, net33472, net33473, 
        net33474, net33475, net33476, net33477, net33478, net33479, net33480, 
        net33481, net33482, net33483, net33484, net33485, net33486, net33487, 
        net33488, net33489, net33490, net33491, net33492, net33493, net33494, 
        net33495, net33496, net33497, net33498}), .RsD({1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0}), .RtD({1'b0, 1'b0, 1'b0, 1'b1, 1'b0}), .RdD({net33499, net33500, 
        net33501, net33502, net33503}), .SignImmD({net33504, net33505, 
        net33506, net33507, net33508, net33509, net33510, net33511, net33512, 
        net33513, net33514, net33515, net33516, net33517, net33518, net33519, 
        net33520, net33521, net33522, net33523, net33524, net33525, net33526, 
        net33527, net33528, net33529, net33530, net33531, net33532, net33533, 
        net33534, net33535}), .clr(net33536), .JALDataD({net33537, net33538}), 
        .RD1toMux1(RD1toMux1) );
  mux4_0 ForwardAEmuxx ( .in0(RD1toMux1), .in1(ResultW), .in2(ALUOutM), .in3({
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), .sel({net33451, 
        net33452}), .mux4out(SrcAE) );
  alu ALUx ( .Func_in({net33413, net33414, net33415, net33416, net33417, 
        net33418}), .A_in(SrcAE), .B_in({net33419, net33420, net33421, 
        net33422, net33423, net33424, net33425, net33426, net33427, net33428, 
        net33429, net33430, net33431, net33432, net33433, net33434, net33435, 
        net33436, net33437, net33438, net33439, net33440, net33441, net33442, 
        net33443, net33444, net33445, net33446, net33447, net33448, net33449, 
        net33450}), .O_out(out_b) );
  reg3 reg3x ( .ref_clk(ref_clk), .RegWriteE(net33352), .MemtoRegE(net33353), 
        .MemWriteE(net33354), .LoadControlE({net33355, net33356, net33357}), 
        .alu_in(out_b), .WriteDataE({net33358, net33359, net33360, net33361, 
        net33362, net33363, net33364, net33365, net33366, net33367, net33368, 
        net33369, net33370, net33371, net33372, net33373, net33374, net33375, 
        net33376, net33377, net33378, net33379, net33380, net33381, net33382, 
        net33383, net33384, net33385, net33386, net33387, net33388, net33389}), 
        .WriteRegE({net33390, net33391, net33392, net33393, net33394}), 
        .SignImmE({net33395, net33396, net33397, net33398, net33399, net33400, 
        net33401, net33402, net33403, net33404, net33405, net33406, net33407, 
        net33408, net33409, net33410, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), .JALDataE({
        net33411, net33412}), .alu_out(ALUOutM) );
  reg4 reg4x ( .ref_clk(ref_clk), .RegWriteM(net33292), .MemtoRegM(net33293), 
        .LoadControlM({net33294, net33295, net33296}), .rd_in({net33297, 
        net33298, net33299, net33300, net33301, net33302, net33303, net33304, 
        net33305, net33306, net33307, net33308, net33309, net33310, net33311, 
        net33312, net33313, net33314, net33315, net33316, net33317, net33318, 
        net33319, net33320, net33321, net33322, net33323, net33324, net33325, 
        net33326, net33327, net33328}), .alu_in(ALUOutM), .WriteRegM({net33329, 
        net33330, net33331, net33332, net33333}), .SignImmM({net33334, 
        net33335, net33336, net33337, net33338, net33339, net33340, net33341, 
        net33342, net33343, net33344, net33345, net33346, net33347, net33348, 
        net33349, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), .JALDataM({net33350, net33351}), 
        .alu_out(ALUOutW) );
  mux_1 MemtoRegWmuxx ( .in0(ALUOutW), .in1({net33259, net33260, net33261, 
        net33262, net33263, net33264, net33265, net33266, net33267, net33268, 
        net33269, net33270, net33271, net33272, net33273, net33274, net33275, 
        net33276, net33277, net33278, net33279, net33280, net33281, net33282, 
        net33283, net33284, net33285, net33286, net33287, net33288, net33289, 
        net33290}), .sel(net33291), .outb(MemtoRegWmuxx_out) );
  mux4_1 JalDataWmuxx ( .in0(ResultW), .in1({net33225, net33226, net33227, 
        net33228, net33229, net33230, net33231, net33232, net33233, net33234, 
        net33235, net33236, net33237, net33238, net33239, net33240, net33241, 
        net33242, net33243, net33244, net33245, net33246, net33247, net33248, 
        net33249, net33250, net33251, net33252, net33253, net33254, net33255, 
        net33256}), .in2({1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), 
        .in3({1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 
        1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0}), .sel({net33257, 
        net33258}), .mux4out(JALDataW_out) );
  shiftextend shiftextendx ( .loadcontrol({net33222, net33223, net33224}), 
        .in32(MemtoRegWmuxx_out), .out32(ResultW) );
endmodule

